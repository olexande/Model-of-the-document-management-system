apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

version = readVersion()

//формируем JAR-файл
jar {
    manifest {
        attributes 'Main-Class': 'org.developers.Start'
    }
}

//при первом запуске в зависимости от ОС запустите gradlew
task gradleWrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

//внутренние свойства
ext {
    junitVersion = '4.12'
    springVersion = '4.3.12.RELEASE'
    lombokVersion = '1.16.20'
    postgresDriver = '9.1-901-1.jdbc4'
    snakeymlVersion = '1.19'
}

//зависимости
dependencies {
    testCompile 'junit:junit:' + rootProject.ext.junitVersion
    compile 'org.springframework:spring-context:' + rootProject.ext.springVersion
    compile 'org.springframework:spring-jdbc:' + rootProject.ext.springVersion
    compileOnly 'org.projectlombok:lombok:' + rootProject.ext.lombokVersion
    compile 'postgresql:postgresql:' + rootProject.ext.postgresDriver
    compile 'org.yaml:snakeyaml:' + rootProject.ext.snakeymlVersion
}

ProjectVersion readVersion() {
    def fileVersion = file('version.properties')
    if (!fileVersion.exists())
        throw new GradleException('Файл версии не найден')
    Properties properties = new Properties()
    fileVersion.withInputStream {
        stream -> properties.load(stream)
    }
    new ProjectVersion(
            properties.major.toInteger(),
            properties.minor.toInteger(),
            properties.release.toBoolean()
    )
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        return "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

//созадём структуру, которая делает текущий проект релизным
class Releaseproject extends DefaultTask {
    @OutputFile
    File difFile

    Releaseproject() {
        group = 'Версирование проекта'
        description = 'Превращение проекта в релиз'
    }

    @TaskAction
    void start() {
        ant.propertyfile(file: difFile) {
            entry(key: 'release', operation: '=', value: 'true')
        }
    }
}

task makeProjectRelease(type: Releaseproject){
    difFile = file('version.properties')
}

